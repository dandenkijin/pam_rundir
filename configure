#!/bin/sh

# Exit immediately if a command exits with a non-zero status
set -e

# Default values
prefix=/
securedir=
parentdir=/run/users
varname=XDG_RUNTIME_DIR
debug=0

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    printf "${GREEN}==>${NC} %s\n" "$1"
}

log_warning() {
    printf "${YELLOW}==> WARNING:${NC} %s\n" "$1" >&2
}

error_exit() {
    printf "${RED}==> ERROR:${NC} %s\n" "$1" >&2
    exit 1
}

# Check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

usage() {
    cat <<EOF
Configure script for ${GREEN}pam_rundir${NC}

Usage: $0 [OPTION...]

Installation directories:
  --prefix=PREFIX         Install architecture-independent files in PREFIX [${prefix}]
  --securedir=DIR         Install PAM module in DIR [PREFIX/lib/security]

Build options:
  --enable-debug          Enable debug symbols and verbose output [disabled]
  --disable-debug         Disable debug symbols

Runtime configuration:
  --with-parentdir=DIR    Parent directory for runtime dirs [${parentdir}]
  --with-varname=NAME     Environment variable name [${varname}]

Help:
  -h, --help              Display this help and exit

Report bugs to: <your-email@example.com>
EOF
    exit ${1:-0}
}

# Check for required tools
check_requirements() {
    log_info "Checking for required tools..."
    
    # Check for basic build tools
    for cmd in cc make; do
        if ! command_exists "$cmd"; then
            error_exit "Required tool '$cmd' not found in PATH"
        fi
    done
    
    # Check for PAM development files
    if ! command_exists "pam-config" && [ ! -f "/usr/include/security/pam_modules.h" ]; then
        log_warning "PAM development files not found. Install 'libpam0g-dev' or equivalent package."
    fi
    
    # Check for pod2man for man page generation
    if ! command_exists "pod2man"; then
        log_warning "pod2man not found - man pages will not be generated"
    fi
}

# Parse command line arguments
cmdline="$0 $*"
while [ $# -gt 0 ]; do
    case "$1" in
        --prefix=*)
            prefix=${1#*=}
            ;;
        --securedir=*)
            securedir=${1#*=}
            ;;
        --with-parentdir=*)
            parentdir=${1#*=}
            ;;
        --with-varname=*)
            varname=${1#*=}
            ;;
        --enable-debug)
            debug=1
            shift
            continue
            ;;
        --disable-debug)
            debug=0
            shift
            continue
            ;;
        -h|--help)
            usage 0
            ;;
        --version)
            echo "${PACKAGE} configure ${VERSION}"
            echo "Configured with: $cmdline"
            exit 0
            ;;
        *)
            error_exit "Unrecognized option: $1"
            ;;
    esac
    shift
done

# Normalize paths
prefix=$(echo "$prefix" | sed 's:/*$::')
parentdir=$(echo "$parentdir" | sed 's:/*$::')

# Set default securedir if not specified
if [ -z "$securedir" ]; then
    securedir="$prefix/lib/security"
else
    securedir=$(echo "$securedir" | sed 's:/*$::')
fi

# Ensure parentdir has a default value if empty
if [ -z "$parentdir" ]; then
    parentdir="/run/users"
fi

# Validate paths
for dir in "$prefix" "$parentdir"; do
    if [ -n "$dir" ] && [ "${dir#/}" = "$dir" ]; then
        error_exit "Path must be absolute: $dir"
    fi
done

# Validate variable name
if ! echo "$varname" | grep -q '^[a-zA-Z_][a-zA-Z0-9_]*$'; then
    error_exit "Invalid environment variable name: $varname"
fi

# Generate config.mak
{
    echo "# This file was generated with: $cmdline"
    echo "# Do not edit manually."
    echo
    echo "# Installation directories"
    echo "PREFIX = $prefix"
    echo "SECUREDIR = $securedir"
    echo
    echo "# Build options"
    if [ "$debug" -eq 1 ]; then
        echo "CFLAGS += -g -O0 -DDEBUG"
    else
        echo "CFLAGS += -O2 -DNDEBUG"
    fi
    echo "CFLAGS += -Wall -Wextra -fPIC"
    echo "LDFLAGS += -shared -lpam"
    echo "CC ?= cc"
} > config.mak

# Generate config.h
{
    echo "/* This file was generated with: $cmdline */"
    echo "/* Do not edit manually. */"
    echo "#ifndef PAM_RUNDIR_CONFIG_H"
    echo "#define PAM_RUNDIR_CONFIG_H"
    echo
    echo "/* Version information */"
    VERSION="1.1.0"
    echo "#define PAM_RUNDIR_VERSION \"$VERSION\""
    echo
    echo "/* Runtime configuration */"
    echo "#define VAR_NAME            \"$varname\""
    echo "#define PARENT_DIR          \"$parentdir\""
    if [ "$debug" -eq 1 ]; then
        echo "#define DEBUG 1"
    fi
    echo
    echo "#endif /* PAM_RUNDIR_CONFIG_H */"
} > config.h

# Print configuration summary
log_info "Configuration complete"
echo
printf "${GREEN}%s${NC}\n\n" "Configuration summary:"
printf "  %-25s " "Build type:"
if [ "$debug" -eq 1 ]; then
    printf "${YELLOW}Debug${NC}\n"
else
    printf "${GREEN}Release${NC}\n"
fi
printf "  %-25s ${GREEN}%s${NC}\n" \
    "Parent dir of runtime dirs:" "${parentdir}" \
    "Environment variable:" "${varname}" \
    "Installation directory:" "${securedir}"

echo -e "\n  Configuration files generated:"
echo "    - config.h"
echo "    - config.mak"
echo -e "\nNow run '${GREEN}make${NC}' to compile the module."

# Run make to verify the configuration
if command_exists make; then
    log_info "Running make to verify configuration..."
    if make -s -n all >/dev/null 2>&1; then
        log_info "Configuration verified successfully"
    else
        log_warning "Configuration verification failed. Please check the output above for errors."
    fi
fi
